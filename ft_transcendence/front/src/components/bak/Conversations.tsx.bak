// import { atom, useAtom } from "jotai";
// import { Fragment, useEffect } from "react";
// import PublicChannel from "../com/interfaces/public-channel.interface";
// import PublicUser from "../com/interfaces/public-user.interface";
// import Message from "../com/interfaces/message.interface";
// import { Atom } from "../com/types/atom.type";
// import useDatabase from "../com/use-database";
// import OnlineUser from "./OnlineUser";
// import ChatUser from "./ChatUser";
// //import { ConversationsAtom } from "../pages/Chat";
// import ClientSocket from "../com/client-socket";
// import { ConversationsAtom } from "./PrivateMessages";

// const Conversations = () => {
// 	const db = useDatabase();
// 	const [messagesIn, setMessagesIn] = useAtom(db.user.messagesInAtom);
// 	const [messagesOut, setMessagesOut] = useAtom(db.user.messagesOutAtom);
// 	const [convs, setConvs] = useAtom(ConversationsAtom);
// 	const [onlineUsers] = useAtom(db.onlineUsersAtom);

// 	const getConvs = () => {
// 		const convs: { username: string, messages: Message[] }[] = [];
// 		messagesIn.forEach(message => {
// 			const sender = onlineUsers.find(user => user.id === message.senderId);
// 			if (sender) {
// 				const already = convs.find(conv => conv.username === sender.user42);
// 				if (already)
// 					already.messages.push(message);
// 				else
// 					convs.push({
// 						username: sender.user42,
// 						messages: [message]
// 					})
// 			}
// 		});
	
// 		messagesOut.forEach(message => {
// 			const receiver = onlineUsers.find(user => user.id === message.receiverId);
// 			const already = convs.find(
// 				conv => conv.username === (receiver as any).user42
// 			);
// 			if (already)
// 				already.messages.push(message);
// 			else
// 				convs.push({
// 					username: (receiver as any).user42,
// 					messages: [message]
// 				})
// 		});
// 		return convs;
// 	}

// 	useEffect(() => {

// 		ClientSocket.on('FailedToCreateDm', (err) => {
// 		})
// 		const newConvs = getConvs()
// 			.map(
// 				({ username, messages }) => ({
// 					user: username,
// 					messages: messages.map(
// 						(msg: Message) => ({
// 							content: msg.content, isOwn: msg.senderId === db.user.id
// 						})
// 					)
// 				})
// 			);
// 		setConvs([...convs, ...newConvs]);
// 	}, [messagesIn, messagesOut]);

// 	return (
// 		<div className="Conversations">
// 			<h2>Conversations</h2>
// 			{
// 				(() => {
// 					return (
// 						<ul className='conversation_users'>
// 							{
// 								convs.map((conv, i) => <ChatUser key={i} conv={conv}/>)
// 							}
// 						</ul>
// 					);
// 				})()
// 			}
// 		</div>
// 	)
// }

// export default Conversations;